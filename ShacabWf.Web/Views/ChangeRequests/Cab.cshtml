@model IEnumerable<ShacabWf.Web.Models.ChangeRequest>
@using ShacabWf.Web.Models

@{
    ViewData["Title"] = "CAB Dashboard";
    bool pendingCalendarView = ViewBag.PendingCalendarView ?? false;
    bool scheduledCalendarView = ViewBag.ScheduledCalendarView ?? false;
}

@section Styles {
    @if (pendingCalendarView || scheduledCalendarView)
    {
        <link href="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.css" rel="stylesheet" />
        <style>
            .fc-event {
                cursor: pointer;
            }
            .fc-event-title {
                font-weight: 500;
            }
            .calendar-container {
                height: 500px;
            }
            .fc-toolbar-title {
                font-size: 1.25rem !important;
            }
            .fc-popover-header {
                background-color: var(--bs-primary);
                color: white;
            }
            .event-tooltip {
                max-width: 300px;
                background: white;
                border: 1px solid #ddd;
                border-radius: 4px;
                padding: 10px;
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                z-index: 1000;
            }
            .event-tooltip h5 {
                margin-top: 0;
                margin-bottom: 5px;
            }
            .event-tooltip p {
                margin-bottom: 5px;
            }
            .pending-approval-event {
                border-left: 5px solid #ffc107 !important;
            }
            .scheduled-change-event {
                border-left: 5px solid #007bff !important;
            }
            .calendar-legend {
                display: flex;
                gap: 20px;
                margin-bottom: 15px;
                flex-wrap: wrap;
            }
            .legend-item {
                display: flex;
                align-items: center;
                gap: 5px;
            }
            .legend-color {
                width: 20px;
                height: 20px;
                border-radius: 3px;
            }
            .legend-border {
                width: 5px;
                height: 20px;
                margin-right: 5px;
            }
        </style>
    }
    <style>
        .view-toggle-btn {
            font-size: 1.1rem;
            padding: 8px 16px;
            margin: 0 5px;
            border-radius: 4px;
            font-weight: 500;
        }
        .view-toggle-container {
            background-color: #f8f9fa;
            padding: 10px;
            border-radius: 6px;
            margin-bottom: 20px;
            border: 1px solid #dee2e6;
        }
        .view-toggle-label {
            font-weight: bold;
            margin-right: 10px;
        }
    </style>
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>CAB Dashboard</h1>
        <div>
            <a asp-controller="Home" asp-action="Simple" class="btn btn-outline-secondary">
                <i class="bi bi-arrow-left"></i> Back to Dashboard
            </a>
        </div>
    </div>

    <div class="alert alert-info mb-4">
        <i class="bi bi-info-circle me-2"></i>
        <strong>Tip:</strong> Each section below has toggle buttons in the header to switch between List and Calendar views.
    </div>

    @if (!Model.Any())
    {
        <div class="alert alert-info">
            <i class="bi bi-info-circle me-2"></i>
            There are no change requests requiring CAB review at this time.
        </div>
    }
    else
    {
        <div class="card shadow-sm mb-4">
            <div class="card-header bg-light d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Pending CAB Approval</h5>
                <div class="btn-group">
                    <a href="@Url.Action("Cab", new { pendingView = "", scheduledView = ViewBag.ScheduledCalendarView == true ? "calendar" : "" })" class="btn view-toggle-btn @(!pendingCalendarView ? "btn-primary" : "btn-outline-primary")">
                        <i class="bi bi-list-ul"></i> List View
                    </a>
                    <a href="@Url.Action("Cab", new { pendingView = "calendar", scheduledView = ViewBag.ScheduledCalendarView == true ? "calendar" : "" })" class="btn view-toggle-btn @(pendingCalendarView ? "btn-primary" : "btn-outline-primary")">
                        <i class="bi bi-calendar3"></i> Calendar View
                    </a>
                </div>
            </div>
            <div class="card-body @(pendingCalendarView ? "" : "p-0")">
                @if (pendingCalendarView)
                {
                    <div class="calendar-legend">
                        <div class="legend-section">
                            <h6 class="mb-2">Status Colors:</h6>
                            <div class="d-flex gap-3 flex-wrap">
                                <div class="legend-item">
                                    <div class="legend-color bg-warning"></div>
                                    <span>Pending Approval</span>
                                </div>
                                <div class="legend-item">
                                    <div class="legend-color bg-success"></div>
                                    <span>Approved</span>
                                </div>
                                <div class="legend-item">
                                    <div class="legend-color bg-danger"></div>
                                    <span>Rejected</span>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="pendingCalendar" class="calendar-container"></div>
                }
                else
                {
                    <div class="table-responsive">
                        <table class="table table-hover mb-0">
                            <thead class="table-light">
                                <tr>
                                    <th>ID</th>
                                    <th>Title</th>
                                    <th>Requester</th>
                                    <th>Status</th>
                                    <th>Priority</th>
                                    <th>Submitted</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model.Where(cr => cr.Status == ChangeRequestStatus.SubmittedForCABApproval || cr.Status == ChangeRequestStatus.SupervisorApproved)
                                                           .OrderBy(cr => cr.CreatedAt))
                                {
                                    <tr>
                                        <td>@item.Id</td>
                                        <td>@item.Title</td>
                                        <td>@(item.CreatedBy?.FullName ?? "Unknown")</td>
                                        <td>
                                            <span class="badge @GetStatusBadgeClass(item.Status)">
                                                @item.Status
                                            </span>
                                        </td>
                                        <td>
                                            <span class="badge @GetPriorityBadgeClass(item.Priority)">
                                                @item.Priority
                                            </span>
                                        </td>
                                        <td>@item.CreatedAt.ToString("MMM dd, yyyy")</td>
                                        <td>
                                            <a asp-controller="ChangeRequests" asp-action="Details" asp-route-id="@item.Id" asp-route-source="cab" class="btn btn-sm btn-outline-primary">
                                                <i class="bi bi-eye"></i> Review
                                            </a>
                                            <div class="btn-group">
                                                <button type="button" class="btn btn-sm btn-success" data-bs-toggle="modal" data-bs-target="#scheduleModal" 
                                                        data-id="@item.Id" data-title="@item.Title" data-action="approve">
                                                    <i class="bi bi-check-circle"></i> Approve & Schedule
                                                </button>
                                                <button type="button" class="btn btn-sm btn-danger" data-bs-toggle="modal" data-bs-target="#rejectModal" 
                                                        data-id="@item.Id" data-title="@item.Title">
                                                    <i class="bi bi-x-circle"></i> Reject
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>

        <div class="card shadow-sm">
            <div class="card-header bg-light d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Scheduled Changes</h5>
                <div class="btn-group">
                    <a href="@Url.Action("Cab", new { pendingView = ViewBag.PendingCalendarView == true ? "calendar" : "", scheduledView = "" })" class="btn view-toggle-btn @(!scheduledCalendarView ? "btn-primary" : "btn-outline-primary")">
                        <i class="bi bi-list-ul"></i> List View
                    </a>
                    <a href="@Url.Action("Cab", new { pendingView = ViewBag.PendingCalendarView == true ? "calendar" : "", scheduledView = "calendar" })" class="btn view-toggle-btn @(scheduledCalendarView ? "btn-primary" : "btn-outline-primary")">
                        <i class="bi bi-calendar3"></i> Calendar View
                    </a>
                </div>
            </div>
            <div class="card-body @(scheduledCalendarView ? "" : "p-0")">
                @if (scheduledCalendarView)
                {
                    <div class="calendar-legend">
                        <div class="legend-section">
                            <h6 class="mb-2">Status Colors:</h6>
                            <div class="d-flex gap-3 flex-wrap">
                                <div class="legend-item">
                                    <div class="legend-color bg-success"></div>
                                    <span>Approved</span>
                                </div>
                                <div class="legend-item">
                                    <div class="legend-color bg-primary"></div>
                                    <span>Scheduled</span>
                                </div>
                                <div class="legend-item">
                                    <div class="legend-color bg-danger"></div>
                                    <span>Failed</span>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="scheduledCalendar" class="calendar-container"></div>
                }
                else
                {
                    <div class="table-responsive">
                        <table class="table table-hover mb-0">
                            <thead class="table-light">
                                <tr>
                                    <th>ID</th>
                                    <th>Title</th>
                                    <th>Requester</th>
                                    <th>Status</th>
                                    <th>Priority</th>
                                    <th>Scheduled Start</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model.Where(cr => cr.Status == ChangeRequestStatus.Scheduled || cr.Status == ChangeRequestStatus.Rescheduled || cr.Status == ChangeRequestStatus.CABApproved)
                                                           .OrderBy(cr => cr.ScheduledStartDate))
                                {
                                    bool isPastDue = item.ScheduledStartDate.HasValue && 
                                                    item.ScheduledStartDate.Value < DateTime.Now && 
                                                    item.Status != ChangeRequestStatus.Completed;
                                    
                                    <tr class="@(isPastDue ? "past-due-change" : "")">
                                        <td>@item.Id</td>
                                        <td>@item.Title</td>
                                        <td>@(item.CreatedBy?.FullName ?? "Unknown")</td>
                                        <td>
                                            <span class="badge @GetStatusBadgeClass(item.Status)">
                                                @item.Status
                                            </span>
                                        </td>
                                        <td>
                                            <span class="badge @GetPriorityBadgeClass(item.Priority)">
                                                @item.Priority
                                            </span>
                                        </td>
                                        <td>@(item.ScheduledStartDate?.ToString("MMM dd, yyyy") ?? "Not scheduled")</td>
                                        <td>
                                            <div class="btn-group">
                                                <a asp-controller="ChangeRequests" asp-action="Details" asp-route-id="@item.Id" asp-route-source="cab" class="btn btn-sm btn-outline-primary">
                                                    <i class="bi bi-eye"></i> Manage
                                                </a>
                                                <button type="button" class="btn btn-sm btn-outline-secondary" data-bs-toggle="modal" data-bs-target="#rescheduleModal" 
                                                        data-id="@item.Id" data-title="@item.Title" 
                                                        data-start="@(item.ScheduledStartDate?.ToString("yyyy-MM-dd") ?? DateTime.Now.AddDays(1).ToString("yyyy-MM-dd"))" 
                                                        data-end="@(item.ScheduledEndDate?.ToString("yyyy-MM-dd") ?? DateTime.Now.AddDays(2).ToString("yyyy-MM-dd"))">
                                                    <i class="bi bi-calendar-check"></i> Reschedule
                                                </button>
                                                @if (item.Status == ChangeRequestStatus.Scheduled)
                                                {
                                                    <button type="button" class="btn btn-sm btn-outline-success" data-bs-toggle="modal" data-bs-target="#completeModal" 
                                                            data-id="@item.Id" data-title="@item.Title">
                                                        <i class="bi bi-check-circle"></i> Complete
                                                    </button>
                                                }
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>
    }
</div>

@section Scripts {
    @if (pendingCalendarView || scheduledCalendarView)
    {
        <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.js"></script>
        <script>
            document.addEventListener('DOMContentLoaded', function() {
                // Initialize tooltip div
                const tooltipDiv = document.createElement('div');
                tooltipDiv.className = 'event-tooltip';
                tooltipDiv.style.position = 'absolute';
                tooltipDiv.style.display = 'none';
                document.body.appendChild(tooltipDiv);
                
                // Helper functions
                function getBootstrapColor(hexColor) {
                    // Map hex colors to Bootstrap color names
                    const colorMap = {
                        '#6c757d': 'secondary',
                        '#17a2b8': 'info',
                        '#ffc107': 'warning',
                        '#28a745': 'success',
                        '#007bff': 'primary',
                        '#dc3545': 'danger'
                    };
                    return colorMap[hexColor] || 'secondary';
                }
                
                function getPriorityColor(priority) {
                    // Map priority to Bootstrap color names
                    const priorityMap = {
                        'Low': 'success',
                        'Medium': 'warning',
                        'High': 'danger',
                        'Critical': 'danger'
                    };
                    return priorityMap[priority] || 'secondary';
                }
                
                function formatDateRange(start, end) {
                    if (!start) return 'No date';
                    
                    const startDate = new Date(start);
                    const formattedStart = startDate.toLocaleDateString('en-US', { 
                        month: 'short', 
                        day: 'numeric', 
                        year: 'numeric' 
                    });
                    
                    if (!end) return formattedStart;
                    
                    const endDate = new Date(end);
                    const formattedEnd = endDate.toLocaleDateString('en-US', { 
                        month: 'short', 
                        day: 'numeric', 
                        year: 'numeric' 
                    });
                    
                    return `${formattedStart} - ${formattedEnd}`;
                }
                
                function truncateText(text, maxLength) {
                    if (!text) return '';
                    if (text.length <= maxLength) return text;
                    return text.substring(0, maxLength) + '...';
                }
                
                // Initialize Pending Calendar if needed
                @if (pendingCalendarView)
                {
                    <text>
                    const pendingCalendarEl = document.getElementById('pendingCalendar');
                    if (pendingCalendarEl) {
                        const pendingCalendar = new FullCalendar.Calendar(pendingCalendarEl, {
                            initialView: 'dayGridMonth',
                            headerToolbar: {
                                left: 'prev,next today',
                                center: 'title',
                                right: 'dayGridMonth,listMonth'
                            },
                            events: '@Url.Action("PendingCalendarData", "ChangeRequests")',
                            eventTimeFormat: {
                                hour: '2-digit',
                                minute: '2-digit',
                                meridiem: false
                            },
                            eventClick: function(info) {
                                // Navigate to details page when clicking on an event
                                if (info.event.url) {
                                    window.location.href = info.event.url;
                                    info.jsEvent.preventDefault(); // prevents browser from following the link
                                }
                            },
                            eventMouseEnter: function(info) {
                                // Show tooltip on hover
                                const event = info.event;
                                const rect = info.el.getBoundingClientRect();
                                
                                tooltipDiv.innerHTML = `
                                    <h5>${event.title}</h5>
                                    <p><strong>Status:</strong> <span class="badge bg-${getBootstrapColor(event.backgroundColor)}">${event.extendedProps.status}</span></p>
                                    <p><strong>Priority:</strong> <span class="badge bg-${getPriorityColor(event.extendedProps.priority)}">${event.extendedProps.priority}</span></p>
                                    <p><strong>Submitted:</strong> ${formatDateRange(event.start, event.end)}</p>
                                    <p>${truncateText(event.extendedProps.description, 100)}</p>
                                `;
                                
                                tooltipDiv.style.display = 'block';
                                tooltipDiv.style.left = rect.right + 10 + 'px';
                                tooltipDiv.style.top = rect.top + 'px';
                            },
                            eventMouseLeave: function() {
                                // Hide tooltip when mouse leaves event
                                tooltipDiv.style.display = 'none';
                            }
                        });
                        
                        pendingCalendar.render();
                    }
                    </text>
                }
                
                // Initialize Scheduled Calendar if needed
                @if (scheduledCalendarView)
                {
                    <text>
                    const scheduledCalendarEl = document.getElementById('scheduledCalendar');
                    if (scheduledCalendarEl) {
                        const scheduledCalendar = new FullCalendar.Calendar(scheduledCalendarEl, {
                            initialView: 'dayGridMonth',
                            headerToolbar: {
                                left: 'prev,next today',
                                center: 'title',
                                right: 'dayGridMonth,listMonth'
                            },
                            events: '@Url.Action("ScheduledCalendarData", "ChangeRequests")',
                            eventTimeFormat: {
                                hour: '2-digit',
                                minute: '2-digit',
                                meridiem: false
                            },
                            eventClick: function(info) {
                                // Navigate to details page when clicking on an event
                                if (info.event.url) {
                                    window.location.href = info.event.url;
                                    info.jsEvent.preventDefault(); // prevents browser from following the link
                                }
                            },
                            eventMouseEnter: function(info) {
                                // Show tooltip on hover
                                const event = info.event;
                                const rect = info.el.getBoundingClientRect();
                                
                                tooltipDiv.innerHTML = `
                                    <h5>${event.title}</h5>
                                    <p><strong>Status:</strong> <span class="badge bg-${getBootstrapColor(event.backgroundColor)}">${event.extendedProps.status}</span></p>
                                    <p><strong>Priority:</strong> <span class="badge bg-${getPriorityColor(event.extendedProps.priority)}">${event.extendedProps.priority}</span></p>
                                    <p><strong>Scheduled:</strong> ${formatDateRange(event.start, event.end)}</p>
                                    <p>${truncateText(event.extendedProps.description, 100)}</p>
                                `;
                                
                                tooltipDiv.style.display = 'block';
                                tooltipDiv.style.left = rect.right + 10 + 'px';
                                tooltipDiv.style.top = rect.top + 'px';
                            },
                            eventMouseLeave: function() {
                                // Hide tooltip when mouse leaves event
                                tooltipDiv.style.display = 'none';
                            }
                        });
                        
                        scheduledCalendar.render();
                    }
                    </text>
                }
            });
        </script>
    }

    <script>
        $(document).ready(function () {
            // Initialize modals
            $('#approveModal').on('show.bs.modal', function (event) {
                var button = $(event.relatedTarget);
                var id = button.data('id');
                var title = button.data('title');
                var modal = $(this);
                modal.find('.modal-title').text('Approve Change Request #' + id);
                modal.find('.change-request-title').text(title);
                modal.find('#approveForm').attr('action', '@Url.Action("CABApprove")/' + id);
            });

            $('#rejectModal').on('show.bs.modal', function (event) {
                var button = $(event.relatedTarget);
                var id = button.data('id');
                var title = button.data('title');
                var modal = $(this);
                modal.find('.modal-title').text('Reject Change Request #' + id);
                modal.find('.change-request-title').text(title);
                modal.find('#rejectForm').attr('action', '@Url.Action("CABReject")/' + id);
            });

            $('#scheduleModal').on('show.bs.modal', function (event) {
                var button = $(event.relatedTarget);
                var id = button.data('id');
                var title = button.data('title');
                var modal = $(this);
                modal.find('.modal-title').text('Approve & Schedule Change Request #' + id);
                modal.find('.change-request-title').text(title);
                modal.find('#scheduleForm').attr('action', '@Url.Action("ApproveAndSchedule")/' + id);
                
                // Set default dates (current date + 1 day for start, + 2 days for end)
                var today = new Date();
                var tomorrow = new Date(today);
                tomorrow.setDate(today.getDate() + 1);
                var dayAfterTomorrow = new Date(today);
                dayAfterTomorrow.setDate(today.getDate() + 2);
                
                // Format dates for input fields (YYYY-MM-DD)
                var formatDate = function(date) {
                    var d = new Date(date),
                        month = '' + (d.getMonth() + 1),
                        day = '' + d.getDate(),
                        year = d.getFullYear();
                    
                    if (month.length < 2) month = '0' + month;
                    if (day.length < 2) day = '0' + day;
                    
                    return [year, month, day].join('-');
                };
                
                modal.find('#startDate').val(formatDate(tomorrow));
                modal.find('#endDate').val(formatDate(dayAfterTomorrow));
            });

            // Reschedule Modal
            $('#rescheduleModal').on('show.bs.modal', function (event) {
                var button = $(event.relatedTarget);
                var id = button.data('id');
                var title = button.data('title');
                var startDate = button.data('start');
                var endDate = button.data('end');
                
                var modal = $(this);
                modal.find('.modal-title').text('Reschedule Change Request #' + id);
                modal.find('.change-request-title').text(title);
                
                // Fix the form action to use the correct URL format
                modal.find('#rescheduleForm').attr('action', '@Url.Action("RescheduleChangeRequest", "ChangeRequests")/' + id);
                
                // Set the date values
                modal.find('#rescheduleStartDate').val(startDate);
                modal.find('#rescheduleEndDate').val(endDate);
                
                // When start date changes, update end date to match
                modal.find('#rescheduleStartDate').off('change').on('change', function() {
                    modal.find('#rescheduleEndDate').val($(this).val());
                });
                
                // Add form validation before submit
                modal.find('#rescheduleForm').off('submit').on('submit', function(e) {
                    var startDateVal = new Date(modal.find('#rescheduleStartDate').val());
                    var endDateVal = new Date(modal.find('#rescheduleEndDate').val());
                    
                    // Validate dates - allow equal dates but not start > end
                    if (startDateVal > endDateVal) {
                        e.preventDefault();
                        alert('Start date cannot be after end date');
                        return false;
                    }
                    
                    // Check if start date is in the past
                    var today = new Date();
                    today.setHours(0, 0, 0, 0); // Reset time to beginning of day for fair comparison
                    
                    if (startDateVal < today) {
                        e.preventDefault();
                        alert('Start date cannot be in the past');
                        return false;
                    }
                });
            });

            // Complete Modal
            $('#completeModal').on('show.bs.modal', function (event) {
                var button = $(event.relatedTarget);
                var id = button.data('id');
                var title = button.data('title');
                
                var modal = $(this);
                modal.find('.modal-title').text('Complete Change Request #' + id);
                modal.find('.change-request-title').text(title);
                modal.find('#completeForm').attr('action', '@Url.Action("CompleteChangeRequest")/' + id);
            });

            // Support Personnel Modal
            $('#supportPersonnelModal').on('show.bs.modal', function (event) {
                var button = $(event.relatedTarget);
                var id = button.data('id');
                console.log("Modal button data-id:", id);
                
                // Ensure id is a valid number
                if (!id || isNaN(parseInt(id))) {
                    console.error("Invalid ID:", id);
                    alert("Error: Invalid change request ID. Please try again.");
                    return;
                }
                
                id = parseInt(id); // Convert to number
                console.log("Parsed ID:", id);
                
                var title = button.data('title');
                console.log("Modal button data-title:", title);
                
                var modal = $(this);
                modal.find('.modal-title').text('Manage Support Personnel for Change Request #' + id);
                modal.find('.change-request-title').text(title);
                modal.find('#assignSupportForm').attr('action', '@Url.Action("AssignSupportPersonnel", "ChangeRequests")');
                modal.find('#changeRequestId').val(id);
                
                // Load current assignments
                $.ajax({
                    url: '@Url.Action("GetChangeRequestAssignments", "ChangeRequests")',
                    type: 'GET',
                    data: { id: id },
                    success: function(data) {
                        console.log("Assignments data:", data);
                        var tbody = $('#assignmentsTableBody');
                        tbody.empty();
                        
                        if (data.length === 0) {
                            tbody.append('<tr><td colspan="5" class="text-center">No assignments found</td></tr>');
                        } else {
                            data.forEach(function(assignment) {
                                var row = '<tr>' +
                                    '<td>' + assignment.assigneeName + '</td>' +
                                    '<td>' + assignment.role + '</td>' +
                                    '<td><span class="badge ' + getAssignmentStatusBadgeClass(assignment.status) + '">' + assignment.status + '</span></td>' +
                                    '<td>' + new Date(assignment.assignedAt).toLocaleDateString() + '</td>' +
                                    '<td>' +
                                    '<button type="button" class="btn btn-sm btn-outline-danger" onclick="removeAssignment(' + assignment.id + ')">' +
                                    '<i class="bi bi-trash"></i>' +
                                    '</button>' +
                                    '</td>' +
                                    '</tr>';
                                tbody.append(row);
                            });
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error("Error loading assignments:", error);
                        console.error("Status:", status);
                        console.error("Response:", xhr.responseText);
                        $('#assignmentsTableBody').html('<tr><td colspan="5" class="text-center text-danger">Error loading assignments</td></tr>');
                    }
                });
                
                // Load support personnel for dropdown
                $.ajax({
                    url: '@Url.Action("GetSupportPersonnel", "ChangeRequests")',
                    type: 'GET',
                    success: function(data) {
                        var select = $('#assigneeId');
                        select.empty();
                        
                        if (data.length === 0) {
                            select.append('<option value="">No support personnel available</option>');
                        } else {
                            select.append('<option value="">Select support personnel...</option>');
                            data.forEach(function(person) {
                                select.append('<option value="' + person.id + '">' + person.fullName + ' (' + person.department + ')</option>');
                            });
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error("Error loading support personnel:", error);
                        console.error("Status:", status);
                        console.error("Response:", xhr.responseText);
                        $('#assigneeId').html('<option value="">Error loading support personnel</option>');
                    }
                });
            });
            
            // Add a button to open the Support Personnel modal
            $('tbody .btn-group').each(function() {
                var row = $(this).closest('tr');
                var changeRequestId = row.find('td:first-child').text(); // Get ID from the first column
                console.log("Row first cell (ID):", changeRequestId);
                
                var title = row.find('td:nth-child(2)').text();
                console.log("Row second cell (Title):", title);
                
                $(this).append(
                    '<button type="button" class="btn btn-sm btn-outline-info" data-bs-toggle="modal" data-bs-target="#supportPersonnelModal" ' +
                    'data-id="' + changeRequestId + '" data-title="' + title + '">' +
                    '<i class="bi bi-people"></i> Support' +
                    '</button>'
                );
            });
        });
        
        // Helper function to get badge class for assignment status
        function getAssignmentStatusBadgeClass(status) {
            switch (status) {
                case 'Assigned':
                    return 'bg-secondary';
                case 'InProgress':
                    return 'bg-primary';
                case 'Completed':
                    return 'bg-success';
                case 'Cancelled':
                    return 'bg-danger';
                default:
                    return 'bg-secondary';
            }
        }
        
        // Function to remove an assignment
        function removeAssignment(assignmentId) {
            if (confirm('Are you sure you want to remove this assignment?')) {
                $.ajax({
                    url: '@Url.Action("RemoveAssignment", "ChangeRequests")',
                    type: 'POST',
                    data: { id: assignmentId },
                    success: function() {
                        // Refresh the assignments table
                        $('#supportPersonnelModal').modal('hide');
                        // Show success message
                        alert('Assignment removed successfully');
                        // Reopen the modal to refresh the data
                        setTimeout(function() {
                            $('#supportPersonnelModal').modal('show');
                        }, 500);
                    },
                    error: function(xhr, status, error) {
                        console.error("Error removing assignment:", error);
                        console.error("Status:", status);
                        console.error("Response:", xhr.responseText);
                        alert('Error removing assignment: ' + error);
                    }
                });
            }
        }
    </script>
}

<!-- Approve Modal -->
<div class="modal fade" id="approveModal" tabindex="-1" aria-labelledby="approveModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="approveModalLabel">Approve Change Request</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="approveForm" method="post">
                <div class="modal-body">
                    <p>Are you sure you want to approve the change request: <strong class="change-request-title"></strong>?</p>
                    <div class="mb-3">
                        <label for="approveComments" class="form-label">Comments (optional)</label>
                        <textarea class="form-control" id="approveComments" name="comments" rows="3"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-success">Approve</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Reject Modal -->
<div class="modal fade" id="rejectModal" tabindex="-1" aria-labelledby="rejectModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="rejectModalLabel">Reject Change Request</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="rejectForm" method="post">
                <div class="modal-body">
                    <p>Are you sure you want to reject the change request: <strong class="change-request-title"></strong>?</p>
                    <div class="mb-3">
                        <label for="rejectComments" class="form-label">Rejection Reason (required)</label>
                        <textarea class="form-control" id="rejectComments" name="comments" rows="3" required></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-danger">Reject</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Schedule Modal -->
<div class="modal fade" id="scheduleModal" tabindex="-1" aria-labelledby="scheduleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="scheduleModalLabel">Approve & Schedule Change Request</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="scheduleForm" method="post">
                <div class="modal-body">
                    <p>Approve and schedule the change request: <strong class="change-request-title"></strong></p>
                    <div class="mb-3">
                        <label for="approveComments" class="form-label">Approval Comments (optional)</label>
                        <textarea class="form-control" id="approveComments" name="comments" rows="3"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="startDate" class="form-label">Start Date</label>
                        <input type="date" class="form-control" id="startDate" name="startDate" required>
                    </div>
                    <div class="mb-3">
                        <label for="endDate" class="form-label">End Date</label>
                        <input type="date" class="form-control" id="endDate" name="endDate" required>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-success">Approve & Schedule</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Complete Modal -->
<div class="modal fade" id="completeModal" tabindex="-1" aria-labelledby="completeModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="completeModalLabel">Complete Change Request</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to mark this change request as completed?</p>
                <p>Change Request: <strong class="change-request-title"></strong></p>
                <form id="completeForm" asp-action="CompleteChangeRequest" method="post">
                    <div class="mb-3">
                        <label for="completionNotes" class="form-label">Completion Notes</label>
                        <textarea class="form-control" id="completionNotes" name="notes" rows="3" placeholder="Enter any notes about the completion"></textarea>
                    </div>
                    <div class="d-grid">
                        <button type="submit" class="btn btn-success">Mark as Completed</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Support Personnel Modal -->
<div class="modal fade" id="supportPersonnelModal" tabindex="-1" aria-labelledby="supportPersonnelModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="supportPersonnelModalLabel">Manage Support Personnel</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Change Request: <strong class="change-request-title"></strong></p>
                
                <div class="mb-3">
                    <h6>Current Assignments</h6>
                    <div id="currentAssignments" class="table-responsive">
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Role</th>
                                    <th>Status</th>
                                    <th>Assigned On</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="assignmentsTableBody">
                                <!-- Will be populated via JavaScript -->
                            </tbody>
                        </table>
                    </div>
                </div>
                
                <hr>
                
                <h6>Add New Assignment</h6>
                <form id="assignSupportForm" method="post">
                    <input type="hidden" id="changeRequestId" name="id" value="" />
                    <div class="mb-3">
                        <label for="assigneeId" class="form-label">Support Personnel</label>
                        <select class="form-select" id="assigneeId" name="assigneeId" required>
                            <!-- Will be populated via JavaScript -->
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="role" class="form-label">Role</label>
                        <input type="text" class="form-control" id="role" name="role" required placeholder="e.g., Implementer, Tester, Reviewer">
                    </div>
                    <div class="mb-3">
                        <label for="notes" class="form-label">Notes</label>
                        <textarea class="form-control" id="notes" name="notes" rows="2" placeholder="Optional notes about this assignment"></textarea>
                    </div>
                    <div class="d-grid">
                        <button type="submit" class="btn btn-primary">Add Assignment</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Reschedule Modal -->
<div class="modal fade" id="rescheduleModal" tabindex="-1" aria-labelledby="rescheduleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="rescheduleModalLabel">Reschedule Change Request</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>You are rescheduling: <strong class="change-request-title"></strong></p>
                <form id="rescheduleForm" asp-controller="ChangeRequests" asp-action="RescheduleChangeRequest" method="post">
                    <div class="mb-3">
                        <label for="rescheduleStartDate" class="form-label">Start Date</label>
                        <input type="date" class="form-control" id="rescheduleStartDate" name="startDate" required>
                    </div>
                    <div class="mb-3">
                        <label for="rescheduleEndDate" class="form-label">End Date</label>
                        <input type="date" class="form-control" id="rescheduleEndDate" name="endDate" required>
                    </div>
                    <div class="d-grid">
                        <button type="submit" class="btn btn-primary">Save Changes</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@functions {
    string GetStatusBadgeClass(ChangeRequestStatus status)
    {
        return status switch
        {
            ChangeRequestStatus.Draft => "bg-secondary",
            ChangeRequestStatus.SubmittedForSupervisorApproval => "bg-info",
            ChangeRequestStatus.SubmittedForCABApproval => "bg-warning",
            ChangeRequestStatus.SupervisorApproved => "bg-success",
            ChangeRequestStatus.CABApproved => "bg-success",
            ChangeRequestStatus.Scheduled => "bg-primary",
            ChangeRequestStatus.Rescheduled => "bg-info",
            ChangeRequestStatus.InProgress => "bg-primary",
            ChangeRequestStatus.Completed => "bg-success",
            ChangeRequestStatus.Failed => "bg-danger",
            ChangeRequestStatus.SupervisorRejected => "bg-danger",
            ChangeRequestStatus.CABRejected => "bg-danger",
            ChangeRequestStatus.Cancelled => "bg-danger",
            _ => "bg-secondary"
        };
    }

    string GetPriorityBadgeClass(ChangeRequestPriority priority)
    {
        return priority switch
        {
            ChangeRequestPriority.Low => "bg-success",
            ChangeRequestPriority.Medium => "bg-warning",
            ChangeRequestPriority.High => "bg-danger",
            ChangeRequestPriority.Critical => "bg-danger text-white",
            _ => "bg-secondary"
        };
    }
} 